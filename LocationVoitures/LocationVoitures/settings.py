"""
Django settings for LocationVoitures project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-gtu=a&n&s!5n8!dh$_z$)m-64!-_$udz7v3a2(tks2!!9__(i6"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "LocVoitures",
    "Auth",
    "customer",
    "manager",
    "reservations"
]

APPEND_SLASH = False

SECRET_KEY = "ma_clef_secrete_pour_signer_les_tokens"

MIDDLEWARE = [
    # Middleware CORS
    'corsheaders.middleware.CorsMiddleware',  # Pour gérer les requêtes CORS (Cross-Origin Resource Sharing)

    # Middleware de sécurité
    'django.middleware.security.SecurityMiddleware',  # Pour des fonctionnalités de sécurité (comme la protection contre les attaques XSS, Clickjacking, etc.)

    # Middleware de gestion des sessions (doit venir avant AuthenticationMiddleware)
    'django.contrib.sessions.middleware.SessionMiddleware',  # Gère les sessions utilisateur

    # Middleware pour le suivi des requêtes et de la réponse
    'django.middleware.common.CommonMiddleware',  # Pour les fonctions de base comme le redirectionnement d'URL, etc.
    
    # Middleware CSRF pour la protection contre les attaques CSRF (Cross-Site Request Forgery)
    'django.middleware.csrf.CsrfViewMiddleware',  # Vérifie les tokens CSRF pour la sécurité des formulaires

    # Middleware pour gérer l'authentification de l'utilisateur (doit venir après SessionMiddleware)
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Ajoute l'utilisateur à chaque requête (request.user)
    
    # Middleware pour afficher les messages d'informations (comme les alertes)
    'django.contrib.messages.middleware.MessageMiddleware',  # Permet l'affichage de messages d'information (flash messages)
    
    # Middleware pour la protection contre le clickjacking
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Empêche l'affichage de la page dans un iframe (protection contre le clickjacking)

    # Middleware personnalisé pour gérer l'authentification basée sur un JWT
    'customer.middleware.JWTAuthMiddleware',  # Middleware personnalisé pour l'authentification via JWT (Customer)
    'manager.middleware.JWTAuthMiddleware',  # Middleware personnalisé pour l'authentification via JWT (Manager)
    'LocVoitures.middleware.JWTAuthMiddleware',  # Middleware personnalisé pour l'authentification via JWT (LocVoitures)
    'reservations.middleware.JWTAuthMiddleware',  # Middleware personnalisé pour l'authentification via JWT (Reservations)

    # Middleware personnalisé pour gérer les accès basés sur les rôles (manager seulement)
    'customer.middleware.ManagerOnlyMiddleware',  # Vérifie si l'utilisateur est un manager (Customer)
    'manager.middleware.ManagerOnlyMiddleware',  # Vérifie si l'utilisateur est un manager (Manager)
    'LocVoitures.middleware.ManagerOnlyMiddleware',  # Vérifie si l'utilisateur est un manager (LocVoitures)
    'reservations.middleware.ManagerOnlyMiddleware',  # Vérifie si l'utilisateur est un manager (Reservations)
]


ROOT_URLCONF = "LocationVoitures.urls"
DEBUG = True

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # ou l'URL de ton frontend React
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]

CORS_ALLOW_HEADERS = [
    'content-type',
    'Authorization',  # Si tu utilises JWT
]

WSGI_APPLICATION = "LocationVoitures.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'LocationVoitures',  # Remplace par le nom de ta base de données MongoDB
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': 'mongodb://localhost:27017',  # Remplace si MongoDB est sur un autre hôte ou port
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    'Auth.auth_backends.EmailAuthBackend',
]
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"


MIGRATION_MODULES = {
    'manager': None,
    'auth': None,
    'contenttypes': None,
    'sessions': None,
    'admin': None,
    # autres apps si besoin
}

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True





# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
